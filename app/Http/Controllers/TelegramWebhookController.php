<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Http;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

class TelegramWebhookController extends Controller
{
    private $botToken;
    private $botUsername;

    public function __construct()
    {
        $this->botToken = config('services.telegram.bot_token');
        $this->botUsername = config('services.telegram.bot_username');
    }

    public function webhook(Request $request)
    {
        try {
            $update = $request->all();
            Log::info('Telegram webhook received', $update);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º secret token –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            $secretToken = $request->header('X-Telegram-Bot-Api-Secret-Token');
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É secret token –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

            if (isset($update['message'])) {
                $this->handleMessage($update['message']);
            }

            if (isset($update['callback_query'])) {
                $this->handleCallbackQuery($update['callback_query']);
            }

            return response('OK', 200);
        } catch (\Exception $e) {
            Log::error('Telegram webhook error: ' . $e->getMessage(), [
                'exception' => $e,
                'request' => $request->all()
            ]);
            return response('Error', 500);
        }
    }

    private function handleMessage($message)
    {
        $chatId = $message['chat']['id'];
        $userId = $message['from']['id'];
        $text = $message['text'] ?? '';
        $firstName = $message['from']['first_name'] ?? '';
        $lastName = $message['from']['last_name'] ?? '';
        $username = $message['from']['username'] ?? null;

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $this->createOrUpdateUser($userId, $firstName, $lastName, $username);

        switch ($text) {
            case '/start':
                $this->sendStartMessage($chatId, $firstName);
                break;
            
            case '/app':
                $this->sendAppMessage($chatId);
                break;
            
            case '/login':
                $this->sendLoginMessage($chatId);
                break;
            
            case '/help':
                $this->sendHelpMessage($chatId);
                break;
            
            default:
                $this->sendDefaultMessage($chatId);
                break;
        }
    }

    private function handleCallbackQuery($callbackQuery)
    {
        $chatId = $callbackQuery['message']['chat']['id'];
        $data = $callbackQuery['data'];
        $callbackQueryId = $callbackQuery['id'];

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        $this->answerCallbackQuery($callbackQueryId);

        switch ($data) {
            case 'open_app':
                $this->sendAppMessage($chatId);
                break;
            
            case 'login_web':
                $this->sendLoginMessage($chatId);
                break;
                
            case 'start':
                $firstName = $callbackQuery['from']['first_name'] ?? '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                $this->sendStartMessage($chatId, $firstName);
                break;
                
            case 'help':
                $this->sendHelpMessage($chatId);
                break;
        }
    }

    private function createOrUpdateUser($telegramId, $firstName, $lastName, $username)
    {
        $user = User::where('telegram_id', $telegramId)->first();
        
        $name = trim($firstName . ' ' . ($lastName ?? ''));
        
        if (!$user) {
            User::create([
                'name' => $name,
                'email' => 'telegram_' . $telegramId . '@telegram.local',
                'password' => Hash::make(Str::random(32)),
                'telegram_id' => $telegramId,
                'telegram_username' => $username,
                'telegram_photo_url' => null,
            ]);
        } else {
            $user->update([
                'name' => $name,
                'telegram_username' => $username,
            ]);
        }
    }

    private function sendStartMessage($chatId, $firstName)
    {
        $message = "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {$firstName}!\n\n";
        $message .= "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!\n\n";
        $message .= "‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n";
        $message .= "‚Ä¢ üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram\n";
        $message .= "‚Ä¢ üì± –†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ Telegram –∫–∞–∫ Mini App\n";
        $message .= "‚Ä¢ ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –±–µ–∑ –ø–∞—Ä–æ–ª–µ–π\n";
        $message .= "‚Ä¢ üîÑ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º\n\n";
        $message .= "üöÄ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ!\n\n";
        $message .= "‚ùì –í–æ–ø—Ä–æ—Å—ã? –ö–æ–º–∞–Ω–¥–∞ /help";

        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                        'web_app' => ['url' => config('app.url') . '/miniapp']
                    ]
                ],
                [
                    [
                        'text' => '‚ùì –ü–æ–º–æ—â—å',
                        'callback_data' => 'help'
                    ]
                ]
            ]
        ];

        $this->sendMessage($chatId, $message, $keyboard);
    }

    private function sendAppMessage($chatId)
    {
        $message = "üì± –í–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n";
        $message .= "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞:\n\n";
        $message .= "–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:\n";
        $message .= "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç\n";
        $message .= "‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n";
        $message .= "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–±–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n";
        $message .= "‚Ä¢ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π";

        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'üöÄ –í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                        'web_app' => ['url' => config('app.url') . '/miniapp']
                    ]
                ]
            ]
        ];

        $this->sendMessage($chatId, $message, $keyboard);
    }

    private function sendLoginMessage($chatId)
    {
        $loginUrl = config('app.url') . '/miniapp';
        
        $message = "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n";
        $message .= "–ï—Å–ª–∏ Mini App –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n\n";
        $message .= "1. –û–±–Ω–æ–≤–∏—Ç—å Telegram –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏\n";
        $message .= "2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n";
        $message .= "3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é –ø–æ —Å—Å—ã–ª–∫–µ:\n";
        $message .= $loginUrl . "\n\n";
        $message .= "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!";

        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é',
                        'url' => $loginUrl
                    ]
                ],
                [
                    [
                        'text' => 'üîô –ù–∞–∑–∞–¥ –∫ Mini App',
                        'callback_data' => 'open_app'
                    ]
                ]
            ]
        ];

        $this->sendMessage($chatId, $message, $keyboard);
    }

    private function sendHelpMessage($chatId)
    {
        $message = "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n\n";
        $message .= "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n";
        $message .= "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n";
        $message .= "/app - –û—Ç–∫—Ä—ã—Ç—å Mini App\n";
        $message .= "/login - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n";
        $message .= "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n";
        $message .= "üöÄ –°–ø–æ—Å–æ–±—ã –∑–∞–ø—É—Å–∫–∞:\n";
        $message .= "‚Ä¢ –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –±–æ—Ç–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n";
        $message .= "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /app\n";
        $message .= "‚Ä¢ –ö–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n\n";
        $message .= "‚ö†Ô∏è –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n";
        $message .= "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è Telegram\n";
        $message .= "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n";
        $message .= "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ–±-–≤–µ—Ä—Å–∏—é\n\n";
        $message .= "üìß –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞";

        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                        'web_app' => ['url' => config('app.url') . '/miniapp']
                    ]
                ],
                [
                    [
                        'text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                        'callback_data' => 'start'
                    ]
                ]
            ]
        ];

        $this->sendMessage($chatId, $message, $keyboard);
    }

    private function sendDefaultMessage($chatId)
    {
        $message = "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É.\n\n";
        $message .= "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.";

        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                        'callback_data' => 'start'
                    ],
                    [
                        'text' => '‚ùì –ü–æ–º–æ—â—å',
                        'callback_data' => 'help'
                    ]
                ]
            ]
        ];

        $this->sendMessage($chatId, $message, $keyboard);
    }

    private function sendMessage($chatId, $text, $keyboard = null)
    {
        $data = [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'Markdown'
        ];

        if ($keyboard) {
            $data['reply_markup'] = json_encode($keyboard);
        }

        $response = Http::post("https://api.telegram.org/bot{$this->botToken}/sendMessage", $data);

        if (!$response->successful()) {
            Log::error('Failed to send Telegram message', [
                'chat_id' => $chatId,
                'response' => $response->body()
            ]);
        }
    }

    private function answerCallbackQuery($callbackQueryId, $text = null)
    {
        $data = [
            'callback_query_id' => $callbackQueryId
        ];

        if ($text) {
            $data['text'] = $text;
        }

        Http::post("https://api.telegram.org/bot{$this->botToken}/answerCallbackQuery", $data);
    }
}
